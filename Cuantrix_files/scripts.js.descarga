$(document).ready(function() {

  setTimeout(function(){
    altopost();
  }, 500);

  
  //setInterval(function(){ altopost(); }, 100);
  
  function altopost(){
    var wpost = $('.posts .post:nth-child(1)').outerWidth();
    var wnoti = $('.noticias .noticia:nth-child(1)').outerWidth();
    var wnotblog = $('.noticias .post:nth-child(1)').outerWidth();
    var wnotdest = $('.destacados .noticia:nth-child(1)').outerWidth();
    var ventana = $(window).width();
    
    $('.posts .post').css({'height':wpost});
    $('.noticias .post').css({'height':wnotblog});
    $('.destacados .noticia').css({'height':wnotdest});

    if (ventana <= 640) {
      $('.posts .cont-scroll').css({'height':wpost*2});
    }else{
      $('.posts .cont-scroll').css({'height':wpost*2});
    };
    
    $('.noticias .noticia').css({'height':wnoti});

    if (ventana <= 480) {
      $('.item.youtube').css({'width':ventana+' !important'});
    };
  }




  $(window).resize(function(event) {
    altopost();
    centra_slide();
  });
  $('.cont-scroll').resize(function(event) {
    altopost();
  });
  $('.cont-scroll').scroll(function(event) {
    altopost();
  });

  var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }
  };

  var n = getUrlParameter('n');
  if (n != undefined) {
    setTimeout(function(){
      slide = 'bloque-principiante';
      cambia_slide(slide);
    }, 600);
  }
  

  $('.navbar-nav li:nth-child(2) a').click(function(event) {
    
    if ( home == true) {
      slide = 'bloque-principiante';
      cambia_slide(slide);
    }

  });

  $('.boton, .cerrar-video').click(function(event) {
    slide = $(this).attr('slide');
    cambia_slide(slide);
  });


  function cambia_slide(slide){
    var ventana = $(window).width();

    slide = slide;

    altopost();

    $('.espacio .bloque').animate({'opacity':'0'}, 400, function(){

      wespacio = $('.espacio').outerWidth();
      wbloque = $('.bloque').outerWidth();

      if (slide == 'bloque-espacio') {
        hbloque = ($('.bloque-espacio .row').outerHeight())+($('.bloque-espacio .informacion').outerHeight())+40;
      }else{
        hbloque = $('.'+slide).outerHeight();  
      };

      if (slide == 'bloque-principiante' || slide == 'bloque-intermedio' || slide == 'bloque-avanzado') {
        $('.navbar-nav li:nth-child(2)').addClass('current-menu-item');
      }else{
        $('.navbar-nav li:nth-child(2)').removeClass('current-menu-item');
      };

      

      $('.espacio .bloque').css({'z-index':'-1'});
      $('.espacio .'+slide).css({'z-index':'100', 'margin-left': (wespacio-wbloque)/2});

      $('.bloque-espacio').css({'height':hbloque});

      $('.espacio .'+slide).animate({'opacity':'1'}, 400);
    });
  }
  

$('div[slide="bloque-video"]').click(function(event) {
  $('.embed-responsive iframe').remove();
  elvideo = $(this).attr('vurl');
  $('.embed-responsive').append('<iframe id="player" class="embed-responsive-item" src="https://www.youtube.com/embed/'+elvideo+'?enablejsapi=1&rel=0&version=3"></iframe>')
  
});
  

});

function centra_slide(){
  wespacio = $('.espacio').outerWidth();
  wbloque = $('.bloque').outerWidth();

  $('.bloque').css({'margin-left': (wespacio-wbloque)/2});
}

(function($) {
  jQuery(document).ready(function($) {
    
    /*
     * The below example uses Slick Carousel, however this can be
     * extended into any type of carousel, provided it lets you
     * bind events when the slide changes. This will only work
     * if all framed videos have the JS API parameters enabled.
     */
    
    //bind our event here, it gets the current slide and pauses the video before each slide changes.
    $(".slick").on("beforeChange", function(event, slick) {
      var currentSlide, slideType, player, command;
      
      //find the current slide element and decide which player API we need to use.
      currentSlide = $(slick.$slider).find(".slick-current");
      
      //determine which type of slide this, via a class on the slide container. This reads the second class, you could change this to get a data attribute or something similar if you don't want to use classes.
      slideType = currentSlide.attr("class").split(" ")[1];
      
      //get the iframe inside this slide.
      player = currentSlide.find("iframe").get(0);
      
      if (slideType == "vimeo") {
        command = {
          "method": "pause",
          "value": "true"
        };
      } else {
        command = {
          "event": "command",
          "func": "pauseVideo"
        };
      }
      
      //check if the player exists.
      if (player != undefined) {
        //post our command to the iframe.
        player.contentWindow.postMessage(JSON.stringify(command), "*");
      }
    });
    
    //start the slider
    $(".slider-socios").slick({
      infinite: true,
      arrows: false,
      dots: false,
      centerMode:false,
      slidesToShow: 2,
      slidesToScroll: 1,
      autoplay:true,
      responsive: [
    {
      breakpoint: 768,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 2,
        slidesToScroll: 1,
        autoplay:true,
      }
    },
    {
      breakpoint: 481,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 2,
        slidesToScroll: 1,
        autoplay:true,
      }
    },
    {
      breakpoint: 361,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay:true,
      }
    }
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
    });

    //start the slider
    $(".slider-aliados").slick({
      infinite: true,
      arrows: false,
      dots: false,
      centerMode:false,
      slidesToShow: 6,
      slidesToScroll: 1,
      autoplay:true,
      responsive: [
    {
      breakpoint: 768,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 6,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 641,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 4,
        slidesToScroll: 1,
        autoplay:true,
      }
    },
    {
      breakpoint: 481,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 2,
        slidesToScroll: 1,
        autoplay:true,
      }
    },
    {
      breakpoint: 361,
      settings: {
        infinite: true,
        arrows: false,
        dots: false,
        centerMode:false,
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay:true,
      }
    }
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
    });

    //start the slider
    $(".slider-videos").slick({
      infinite: false,
      arrows: false,
      dots: true,
      centerMode:false,
      slidesToShow: 1,
      slidesToScroll: 1,
      responsive: [
    {
      breakpoint: 768,
      settings: {
        infinite: false,
        arrows: false,
        dots: true,
        centerMode:false,
        slidesToShow: 1,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 480,
      settings: {
        infinite: false,
        arrows: false,
        dots: true,
        centerMode:false,
        slidesToShow: 1,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 360,
      settings: {
        infinite: false,
        arrows: false,
        dots: true,
        centerMode:false,
        slidesToShow: 1,
        slidesToScroll: 1,
      }
    }
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
    });

     //start the slider
    $(".slider-vertical").slick({
      vertical: true,
      infinite: false,
      arrows: true,
      dots: false,
      centerMode:false,
      slidesToShow: 5,
      slidesToScroll: 1,
      prevArrow:'<button type="button" class="arriba"><i class="fa fa-angle-up" aria-hidden="true"></i></i></button>',
      nextArrow:'<button type="button" class="abajo"><i class="fa fa-angle-down" aria-hidden="true"></i></button>',
      draggable:false,
      responsive: [
    {
      breakpoint: 1201,
      settings: {
        vertical: true,
        infinite: false,
        arrows: true,
        dots: false,
        centerMode:false,
        slidesToShow: 4,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 769,
      settings: {
        vertical: true,
        infinite: false,
        arrows: true,
        dots: false,
        centerMode:false,
        slidesToShow: 2,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 768,
      settings: {
        vertical: true,
        infinite: false,
        arrows: true,
        dots: false,
        centerMode:false,
        slidesToShow: 5,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 481,
      settings: {
        vertical: true,
        infinite: false,
        arrows: true,
        dots: false,
        centerMode:false,
        slidesToShow: 4,
        slidesToScroll: 1,
      }
    },
    {
      breakpoint: 391,
      settings: {
        vertical: true,
        infinite: false,
        arrows: true,
        dots: false,
        centerMode:false,
        slidesToShow: 3,
        slidesToScroll: 1,
      }
    }
    // You can unslick at a given breakpoint now by adding:
    // settings: "unslick"
    // instead of a settings object
  ]
    });
    
    //run the fitVids jQuery plugin to ensure the iframes stay within the item.
    $('.item').fitVids();
    
  });
})(jQuery);